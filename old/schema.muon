:::
## Union list.
union: list record
  ## Name of Rust enum to make from this union.
  name: text
  ## Documentation of union from C API (optionally modify for Rust API).
  doc: optional text
  ## Associated #[repr(C)] enum name.
  enum: text
  ## List of variants.
  variant: list record
    ## Type associated with this variant of the enum.
    type: text
## Enum list.
enum: list record
  ## Name of #[repr(C)] enum.
  name: text
  ## Documentation of enum from C API (optionally modify for Rust API).
  doc: optional text
  ## Optional type of enum besides default.
  type: optional text
  ## A list of variants of enum.
  variant: list record
    ## Variant name
    name: text
    ## Documentation of variant from C API (optionally modify for Rust API).
    doc: optional text
    ## Variant value
    value: optional int
## Struct address list (`void *`).  Must be a Ref, Mut, or New
address: list record
  ## Name of tuple struct
  name: text
  ## Documentation of struct from C API (optionally modify for Rust API).
  doc: optional text
  ## Associated struct - if left out, then struct is opaque
  struct: optional text
  ## Function to get number of bytes to create.
  bytes: optional text
  ## Associated desconstructor
  old: optional text
## Struct list
struct: list record
  ## Name of #[repr(C)] struct
  name: text
  ## Documentation of struct from C API (optionally modify for Rust API).
  doc: optional text
  ## A list of fields in the struct.  Leave empty for reference-only structs.
  field: list record Param
    ## Parameter name.
    name: text
    ## Parameter attribute.
    ## - `Val`: Input, pass-by-value (copy).
    ## - `Out`: Output, pointer to uninitialized data to be initialized.
    ## - `New`: Output, pointer to uninitialized pointer to be allocated.
    ## - `Mut`: Input-Output, initialized reference that may change.
    ## - `Ref`: Input, pass-by-reference, initialized memory that won't change.
    ## - `Old`: Input, pass-by-reference, and free all.
    ## - `Eat`: Input, pass-by-value (copy), and free all.
    ## - `Inv`: Input, pass-by-reference, and free fields but not struct itself.
    ## - `Len`: Input, pass-by-value (must use with Arr).
    ## - `Err`: Output, pointer to uninitialized error data to be initialized.
    ## - `Txt`: Use integer value as length for a .text parameter
    ## - `Opt`: Modifier on references - use NULL for None.
    ## - `Arr`: Modifier on references - multiple.
    attr: list text
    ## Parameter type.  Special types:
    ## - `.textz`: String slice in Rust, 0-terminated utf8/ascii in C.
    ## - `.text`: String slice in Rust, passed w/ length to C. 
    type: text
## Function list.
func: list record
  ## C Header definition of this function.
  def: text
  ## C Module name.
  mod: list text
  ## Documentation of function from C API (optionally modify for Rust API).
  doc: optional text
  ## C Patterns used in this function.
  pat: dictionary
    ## Pattern name is key, parameters affected is value (use .return keyword
    ## for return value).
    text: list text
:::
